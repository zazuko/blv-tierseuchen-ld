@base <urn:pipeline:tierseuchen-ld> .
@prefix : <https://pipeline.described.at/> .
@prefix code: <https://code.described.at/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

_:common-vars :variable
  [ a :Variable; :name "targetDir"; :value "target" ] ,
  [ a :Variable; :name "mappingsDir"; :value "metadata" ],
  [ a :Variable; :name "sourceDir"; :value "source" ],
  [ a :Variable; :name "graph"; :value "https://linked.opendata.swiss/graph/blv/animalpest" ] .

# ------------------------------
#
# Root pipeline
#
# Entire workflow: download, extract and process files
#
# ------------------------------

<#RootFile> a :Pipeline, :Readable;
  :steps [
    :stepList (
      [ a :Step ;
        code:implementedBy [ a code:EcmaScript; code:link <file:../lib/sequence> ];
        code:arguments ( <#Download-Sources> <#TransformFiles>  ) ]
    ) ] .

<#Root> a :Pipeline, :Readable;
  :steps [
    :stepList (
      [ a :Step ;
        code:implementedBy [ a code:EcmaScript; code:link <file:../lib/sequence> ];
        code:arguments ( <#Download-Sources> <#TransformFilesGraphStore>  ) ]
    ) ] .

# ------------------------------
#
# Download pipeline
#
# Downloads the zip and extracts contents to ${sourceDir}
#
# ------------------------------

<#Download-Sources> a :Pipeline, :Readable ;
  :steps
    [
      :stepList ( <#download> <#extract> )
    ] ;
  :variables
    [
      :variable [ a :Variable; :name "sourceUrl"; :value "http://ktk.netlabs.org/misc/rdf/InfoSM.zip" ]
    ],
    _:common-vars .

<#download> a :Step ;
  code:implementedBy
    [
      code:link <node:barnard59-base#fetch> ;
      a code:EcmaScript
    ] ;
  code:arguments (
    "${sourceUrl}"^^code:EcmaScriptTemplateLiteral
  ).

<#extract> a :Step ;
  code:implementedBy
    [
      code:link <file:../lib/zip#extract> ;
      a code:EcmaScript
    ] ;
  code:arguments (
    "sourceDir"^^:VariableName
  ).

# ------------------------------
#
# Transform pipeline
#
# One-by-one parses and transforms the source csv files to RDF
#
# ------------------------------

<#TransformFilesGraphStore> a :Pipeline ;
  :steps [
      :stepList ( <#readDir> <#doTransform> <#sparqlInsert> <#setGraph> <#upload>)
#      :stepList ( <#readDir> <#doTransform> <#serialize> <#save>)

    ] ;
  :variables _:common-vars .

<#TransformFiles> a :Pipeline ;
  :steps [
#      :stepList ( <#readDir> <#doTransform> <#sparqlInsert> <#serialize> <#save>)
      :stepList ( <#readDir> <#doTransform> <#serialize> <#save>)

    ] ;
  :variables _:common-vars .

<#readDir> a :Step ;
  code:implementedBy
    [
      code:link <file:../lib/dir#iterateFiles> ;
      a code:EcmaScript
    ] ;
  code:arguments (
    "mappingsDir"^^:VariableName
   ) .

<#doTransform> a :Step ;
  code:implementedBy [
      code:link <node:barnard59-core#forEach> ;
      a code:EcmaScript
    ] ;
  code:arguments (
    <#TransformCsv>
    "(p, fileName) => { p.variables.set('csvw', fileName) }"^^code:EcmaScript
  ) .

# ------------------------------
#
# Transforms individual files
#
# ------------------------------

<#TransformCsv> a :Pipeline, :ReadableObjectMode ;
  :steps
    [
#      :stepList ( <#openCsv> <#parse> <#municipalityLookup> <#fixCantonCase> <#tierGruppe> <#filterNotCsvw> )
      :stepList ( <#openCsv> <#parse> <#fixCantonCase> <#tierGruppe> <#filterNotCsvw> )


    ] ;
  :variables _:common-vars.

<#openCsv> a :Step ;
  code:implementedBy [
      code:link <file:../lib/csv#openFromCsvw> ;
      a code:EcmaScript
    ] ;
  code:arguments ( "metadata/${csvw}"^^code:EcmaScriptTemplateLiteral ) .

<#parse> a :Step;
  code:implementedBy
    [
      code:link <node:barnard59-formats#csvw.parse>;
      a code:EcmaScript
    ];
  code:arguments ( <#parseMetadata> ).

<#parseMetadata> a :Pipeline, :ReadableObjectMode;
  :steps
    [
      :stepList ( <#readMetadata> <#parseMetadataStep> )
    ].

<#readMetadata> a :Step;
  code:implementedBy
    [
      code:link <node:fs#createReadStream>;
      a code:EcmaScript
    ];
  code:arguments ("metadata/${csvw}"^^code:EcmaScriptTemplateLiteral).

<#parseMetadataStep> a :Step;
  code:implementedBy
    [
      code:link <node:barnard59-formats#jsonld.parse>;
      a code:EcmaScript
    ].

<#municipalityLookup> a :Step ;
  code:implementedBy
    [
      code:link <node:barnard59-base#map> ;
      a code:EcmaScript
    ] ;
  code:arguments (
    [
      code:link <file:../lib/municipality-lookup.js> ;
      a code:EcmaScript
    ]
  ) .

<#filterNotCsvw> a :Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-base#filter>
 ];
 code:arguments ( """quad => {
    if (quad.predicate.value.startsWith('http://www.w3.org/ns/csvw#')) {
	 return false
	}
	if (quad.predicate.value === 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' && quad.object.value.startsWith('http://www.w3.org/ns/csvw#')) {
	 return false
	}
	return true
	}"""^^code:EcmaScript ).

<#fixCantonCase> a :Step ;
  code:implementedBy [
    code:link <node:barnard59-base#map> ;
    a code:EcmaScript
  ];
  code:arguments ( """quad => {
      const rdf = require('rdf-ext')
      if (quad.predicate.value !== 'http://ld.zazuko.com/animalpest/attribute/canton') {
        return quad
      }
    
      return rdf.quad(quad.subject, quad.predicate, rdf.namedNode(quad.object.value.toLowerCase()))
    }"""^^code:EcmaScript) .

<#tierGruppe> a :Step ;
  code:implementedBy [
    code:link <node:barnard59-base#map> ;
    a code:EcmaScript
  ];
  code:arguments ( """quad => {
      const urlSlug = require('url-slug')
      const rdf = require('rdf-ext')
	  
	  if(quad.predicate.value == 'http://example.org/tiergruppe'){
    	const iriArray = quad.object.value.split('ยง')
		  const group = decodeURI(iriArray[1]).trim()
      const groupSlug = urlSlug(group)
		
		  return rdf.quad(quad.subject, rdf.namedNode('http://www.w3.org/2004/02/skos/core#broader'), rdf.namedNode('http://ld.zazuko.com/animalpest/species/group/'+groupSlug))
	  }

	  if(quad.subject.value.includes('ยง')){
   		const iriArray = quad.subject.value.split('ยง')
		  const group = decodeURI(iriArray[1]).trim()
      const groupSlug = urlSlug(group)
		
		return rdf.quad(rdf.namedNode(iriArray[0]+groupSlug), quad.predicate, quad.object);
	  }


      return quad
    }"""^^code:EcmaScript) .

<#sparqlInsert> a :Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-tdb#update>
  ];
  code:arguments [
    code:name "queries";
    code:value (
      "require('fs').readFileSync('sparql/extra_municipality2currentname.rq').toString()"^^code:EcmaScript
      "require('fs').readFileSync('sparql/extra_cantonname.rq').toString()"^^code:EcmaScript
    )
  ].

<#serialize> a :Step;
  code:implementedBy
    [
      code:link <node:barnard59-formats#ntriples.serialize> ;
      a code:EcmaScript
    ].

<#save> a :Step;
  code:implementedBy
    [
      code:link <node:fs#createWriteStream>;
      a code:EcmaScript
    ];
  code:arguments ("${targetDir}/everything.nt"^^code:EcmaScriptTemplateLiteral).

<#setGraph> a :Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-base#setGraph>
  ];
  code:arguments ( "graph"^^:VariableName ).

<#upload> a :Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-graph-store#put>
  ];
  code:arguments [
    code:name "endpoint";
    code:value "endpoint"^^:VariableName
  ], [
    code:name "user";
    code:value "user"^^:VariableName
  ], [
    code:name "password";
    code:value "password"^^:VariableName
  ].
