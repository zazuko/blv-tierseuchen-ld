@base <urn:pipeline:tierseuchen-ld> .
@prefix : <http://example.org/barnard59/> .
@prefix code: <http://example.org/code/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

_:common-vars :variable
  [ a :Variable; :name "targetDir"; :value "target" ] ,
  [ a :Variable; :name "sourceDir"; :value "source" ] .

# ------------------------------
#
# Root pipeline
#
# Entire workflow: download, extract and process files
#
# ------------------------------

<#Root> a :Pipeline ;
  :steps [
    :stepList (
      [ a :Step ;
        :operation [ a code:ecmaScript; code:link <file:../lib/sequence> ];
        :arguments ( <#Download-Sources> <#TransformFiles> ) ]
    ) ] .

# ------------------------------
#
# Download pipeline
#
# Downloads the zip and extracts contents to ${sourceDir}
#
# ------------------------------

<#Download-Sources> a :Pipeline ;
  :steps
    [
      :stepList ( <#download> <#extract> )
    ] ;
  :variables
    [
      :variable [ a :Variable; :name "sourceUrl"; :value "http://ktk.netlabs.org/misc/rdf/seuchenmeldungen.zip" ]
    ],
    _:common-vars .

<#download> a :Step ;
  :operation
    [
      code:link <node:barnard59-base#fetch> ;
      a code:ecmaScript
    ] ;
  :arguments (
    "${sourceUrl}"^^code:ecmaScriptTemplateLiteral
  ).

<#extract> a :Step ;
  :operation
    [
      code:link <file:../lib/zip#extract> ;
      a code:ecmaScript
    ] ;
  :arguments (
    "sourceDir"^^:VariableName
  ).

# ------------------------------
#
# Transform pipeline
#
# One-by-one parses and transforms the source csv files to RDF
#
# ------------------------------

<#TransformFiles> a :Pipeline ;
  :steps [
      :stepList ( <#readDir> <#filterFiles> <#doTransform> )
    ] ;
  :variables _:common-vars .

<#filterFiles> a :Step ;
  :operation
    [
      code:link <node:barnard59-base#filter> ;
      a code:ecmaScript
    ] ;
  :arguments (
    "fileName => fileName != 'Stammdaten_kanton.csv' && fileName != 'Stammdaten_bezirk.csv' && fileName != 'Stammdaten_gemeinde.csv'"^^code:ecmaScript
  ) .

<#readDir> a :Step ;
  :operation
    [
      code:link <file:../lib/dir#iterateFiles> ;
      a code:ecmaScript
    ] ;
  :arguments (
    "sourceDir"^^:VariableName
   ) .

<#doTransform> a :Step ;
  :operation [
      code:link <node:barnard59-core#forEach> ;
      a code:ecmaScript
    ] ;
  :arguments (
    <#TransformCsv>
    "fileName => this.variables.set('csv', fileName)"^^code:ecmaScript
  ) .

# ------------------------------
#
# Transforms individual files
#
# ------------------------------

<#TransformCsv> a :Pipeline ;
  :steps
    [
      :stepList ( <#openCsv> <#parse> <#serialize> <#save> )
    ] ;
  :variables _:common-vars.

<#openCsv> a :Step ;
  :operation [
      code:link <node:fs#createReadStream> ;
      a code:ecmaScript
    ] ;
  :arguments ( "${sourceDir}/${csv}"^^code:ecmaScriptTemplateLiteral ) .

<#parse> a :Step;
  :operation
    [
      code:link <node:barnard59-formats#csvw.parse>;
      a code:ecmaScript
    ];
  :arguments ( <#parseMetadata> ).

<#parseMetadata> a :ObjectPipeline;
  :steps
    [
      :stepList ( <#readMetadata> <#parseMetadataStep> )
    ].

<#readMetadata> a :Step;
  :operation
    [
      code:link <node:fs#createReadStream>;
      a code:ecmaScript
    ];
  :arguments ("metadata/${csv}.meta.json"^^code:ecmaScriptTemplateLiteral).

<#parseMetadataStep> a :Step;
  :operation
    [
      code:link <node:barnard59-formats#jsonld.parse>;
      a code:ecmaScript
    ].

<#serialize> a :Step;
  :operation
    [
      code:link <node:barnard59-formats#ntriples.serialize> ;
      a code:ecmaScript
    ].

<#save> a :Step;
  :operation
    [
      code:link <node:fs#createWriteStream>;
      a code:ecmaScript
    ];
  :arguments ("${targetDir}/${csv}.nt"^^code:ecmaScriptTemplateLiteral).
