@base <urn:pipeline:tierseuchen-ld> .
@prefix : <http://example.org/barnard59/> .
@prefix code: <http://example.org/code/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

<#Root> a :Pipeline ;
  :steps [
    :stepList ( <#download> <#unzip> <#transform> )
  ] ;
  :variables [
    :variable
      [ :name "source"; :value "http://ktk.netlabs.org/misc/rdf/seuchenmeldungen.zip" ]
  ].

<#download> a :Step ;
  :operation [
    code:link <node:barnard59-base#fetch> ;
    code:type code:ecmaScript
  ] ;
  :arguments (
    "${source}"^^code:ecmaScriptTemplateLiteral
  ).

<#serialize> a :Step;
  :operation [
    code:link <node:barnard59-formats#ntriples.serialize> ;
    code:type code:ecmaScript
  ].

<#save> a :Step;
  :operation [
    code:link <node:fs#createWriteStream>;
    code:type code:ecmaScript
  ];
  :arguments ("out/${csv}.nt"^^code:ecmaScriptTemplateLiteral).

<#unzip> a :Step ;
  :operation [
    code:link <file:../lib/zip#unzip> ;
    code:type code:ecmaScript
  ] .

<#transform> a :Step ;
  :operation [
    code:link <file:../lib/zip#transform> ;
    code:type code:ecmaScript
  ] ;
  :arguments (
    [
      code:link <#Transform> ;
      code:type :ObjectPipeline
    ]
    "fileName => fileName != 'Stammdaten_kanton.csv' && fileName != 'Stammdaten_bezirk.csv' && fileName != 'Stammdaten_gemeinde.csv'"^^code:ecmaScript
  ).

# ------------------------------
#
# Transformation pipeline
#
# ------------------------------

<#Transform> a :Pipeline ;
  :steps [
    :stepList ( <#parse> <#serialize> <#save> )
  ] .

<#parse> a :Step;
  :operation [
    code:link <node:barnard59-formats#csvw.parse>;
    code:type code:ecmaScript
  ];
  :arguments ([
    code:link <#parseMetadata>;
    code:type :ObjectPipeline
  ]).

<#parseMetadata> a :ObjectPipeline;
  :steps [
    :stepList ( <#readMetadata> <#parseMetadataStep> )
  ].

<#readMetadata> a :Step;
  :operation [
    code:link <node:fs#createReadStream>;
    code:type code:ecmaScript
  ];
  :arguments ("metadata/${csv}.meta.json"^^code:ecmaScriptTemplateLiteral).

<#parseMetadataStep> a :Step;
  :operation [
    code:link <node:barnard59-formats#jsonld.parse>;
    code:type code:ecmaScript
  ].
